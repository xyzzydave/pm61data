AWSTemplateFormatVersion: 2010-09-09
Description: A lambda to evaluate port 22 health

Parameters:
  SecurityGroup:
    Description: Enter the sg
    Type: String
  Subnet:
    Description: Enter the subnet of the priv host
    Type: String
    
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action: 
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: "*"                
                
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: curlPort22
      Environment:
        Variables:
          privHostIp: !ImportValue NodeIp      
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref SecurityGroup
        SubnetIds: 
          - !Ref Subnet
      Code:
        ZipFile: |
          import socket  
          import os

          def handler(event, context):
            ip = os.environ['privHostIp']            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)                                      #2 Second Timeout
            result = sock.connect_ex((ip, 22))
            if result == 0:
              print('port OPEN')
            else:
              print('port CLOSED, connect_ex returned: '+str(result))
            return None
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      
  LambdaSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        A schedule for the Lambda function..
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !Sub ${LambdaFunction.Arn}
          Id: LambdaSchedule

  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${LambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaSchedule.Arn}
  
  LambdaLogGroup:      
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /codeproject
      RetentionInDays: 1
      
  LogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: /codeproject
      LogStreamName: !Ref LambdaFunction
            